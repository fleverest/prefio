[{"path":"https://fleverest.github.io/prefio/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Floyd Everest. Author, maintainer. Heather Turner. Author. Damjan Vukcevic. Author.","code":""},{"path":"https://fleverest.github.io/prefio/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Everest F, Turner H, Vukcevic D (2025). prefio: Structures Preference Data. R package version 0.2.0, https://github.com/fleverest/prefio/.","code":"@Manual{,   title = {prefio: Structures for Preference Data},   author = {Floyd Everest and Heather Turner and Damjan Vukcevic},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/fleverest/prefio/}, }"},{"path":[]},{"path":"https://fleverest.github.io/prefio/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Structures for Preference Data","text":"Preferential datasets used many research communities including, limited , work elections, recommender systems, computational social choice, combinatorial optimization. prefio provides tidy format dealing preferences, along set functions enable users perform wide range analyses.","code":""},{"path":"https://fleverest.github.io/prefio/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Structures for Preference Data","text":"package may installed CRAN via development version can installed via","code":"install.packages(\"prefio\") # install.packages(\"remotes\") remotes::install_github(\"fleverest/prefio\")"},{"path":"https://fleverest.github.io/prefio/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Structures for Preference Data","text":"prefio provides tidy interface processing data tabular formats well sourcing data one unified PrefLib formats, including convenient method downloading data files directly PrefLib R session.","code":""},{"path":"https://fleverest.github.io/prefio/index.html","id":"casting-from-character-vectors","dir":"","previous_headings":"Usage","what":"Casting from character vectors","title":"Structures for Preference Data","text":"easiest way try things write preferences strings, cast preferences. example:","code":"preferences(c(\"Apple > Banana > Carrot\", \"Carrot > Banana = Apple\")) ## [1] [Apple > Banana > Carrot] [Carrot > Banana = Apple]"},{"path":"https://fleverest.github.io/prefio/index.html","id":"processing-long-format-data","dir":"","previous_headings":"Usage","what":"Processing long-format data","title":"Structures for Preference Data","text":"Preferential datasets can come many forms. common way preferential datasets stored long-format item/rank columns. example, consider dataset votes Three preferential votes, ranking three candidates long-format. , summarise votes new column type preferences. Note , since just gathering preferential data across multiple rows , syntax quite similar dplyr::pivot_wider. Indeed, function based , extra arguments passed directly dplyr::pivot_wider via ....","code":"long <- tribble(   ~ID, ~VoterLocation, ~Candidate, ~Rank,   1, \"Melbourne\", \"Allie\", 1,   1, \"Melbourne\", \"Beatriz\", 2,   1, \"Melbourne\", \"Charles\", 3,   2, \"Wangaratta\", \"Allie\", 3,   2, \"Wangaratta\", \"Beatriz\", 2,   2, \"Wangaratta\", \"Charles\", 1,   3, \"Geelong\", \"Allie\", 2,   3, \"Geelong\", \"Beatriz\", 1,   3, \"Geelong\", \"Charles\", 3 )  long |>   long_preferences(     vote,     id_cols = c(ID, VoterLocation),     rank_col = Rank,     item_col = Candidate   ) ## # A tibble: 3 × 3 ##      ID VoterLocation                        vote ##   <dbl> <chr>                          <prefrncs> ## 1     1 Melbourne     [Allie > Beatriz > Charles] ## 2     2 Wangaratta    [Charles > Beatriz > Allie] ## 3     3 Geelong       [Beatriz > Allie > Charles]"},{"path":"https://fleverest.github.io/prefio/index.html","id":"processing-wide-format-data","dir":"","previous_headings":"Usage","what":"Processing wide-format data","title":"Structures for Preference Data","text":"Another common way store preferential data wide-format, column represents candidate/item values represent rank assigned. Let’s recreate previous example wide-format: Three preferential votes, ranking three candidates wide-format. , summarise votes new column type preferences.","code":"wide <- tribble(   ~ID, ~VoterLocation, ~Allie, ~Beatriz, ~Charles,   1, \"Melbourne\", 1, 2, 3,   2, \"Wangaratta\", 3, 2, 1,   3, \"Geelong\", 2, 1, 3 )  wide |>   wide_preferences(vote, Allie:Charles) ## # A tibble: 3 × 3 ##      ID VoterLocation                        vote ##   <dbl> <chr>                          <prefrncs> ## 1     1 Melbourne     [Allie > Beatriz > Charles] ## 2     2 Wangaratta    [Charles > Beatriz > Allie] ## 3     3 Geelong       [Beatriz > Allie > Charles]"},{"path":"https://fleverest.github.io/prefio/index.html","id":"reading-from-preflib","dir":"","previous_headings":"Usage","what":"Reading from PrefLib","title":"Structures for Preference Data","text":"Netflix Prize competition devised Netflix improve accuracy recommendation system. facilitate released ratings movies users system transformed preference data available PrefLib, (Bennett Lanning 2007). data set comprises rankings set 3 4 movies selected random. consider rankings just one set movies illustrate functionality prefio. PrefLib datafiles can downloaded --fly specifying argument from_preflib = TRUE read_preflib function: row corresponds unique ordering four movies dataset. number Netflix users assigned ordering given frequency column. case, common ordering (68 voters specifying preferences) following:","code":"netflix <- read_preflib(\"00004 - netflix/00004-00000138.soc\", from_preflib = TRUE) head(netflix) ## # A tibble: 6 × 2 ##                                                                     preferences ##                                                                      <prefrncs> ## 1 [Beverly Hills Cop > Mean Girls > Mission: Impossible II > The Mummy Returns] ## 2 [Mean Girls > Beverly Hills Cop > Mission: Impossible II > The Mummy Returns] ## 3 [Beverly Hills Cop > Mean Girls > The Mummy Returns > Mission: Impossible II] ## 4 [Mean Girls > Beverly Hills Cop > The Mummy Returns > Mission: Impossible II] ## 5 [Beverly Hills Cop > Mission: Impossible II > Mean Girls > The Mummy Returns] ## 6 [The Mummy Returns > Beverly Hills Cop > Mean Girls > Mission: Impossible II] ## # ℹ 1 more variable: frequency <int> netflix$preferences[1] ## [1] [Beverly Hills Cop > Mean Girls > Mission: Impossible II > The Mummy Returns]"},{"path":"https://fleverest.github.io/prefio/index.html","id":"writing-to-preflib-formats","dir":"","previous_headings":"Usage","what":"Writing to Preflib formats","title":"Structures for Preference Data","text":"prefio provides convenient interface writing preferential datasets PrefLib formats. aid user, preferences() function automatically calculates metrics dataset required producing valid PrefLib files. example, can write example earlier PrefLib format: Note produces four warnings. warning corresponds field required official PrefLib format, may necessary internal use-cases. goal publish data PrefLib, warnings must resolved.","code":"long |>   long_preferences(     vote,     id_cols = ID,     rank_col = Rank,     item_col = Candidate,     unused_fn = list(VoterLocation = dplyr::first)   ) |>   write_preflib(preferences_col = vote) ## Warning in write_preflib(long_preferences(long, vote, id_cols = ID, rank_col = ## Rank, : Missing `title`: the PrefLib format requires a title to be specified. ## Using `NA`.  ## Warning in write_preflib(long_preferences(long, vote, id_cols = ID, rank_col = ## Rank, : Missing `publication_date`, using today's date(2025-09-03).  ## Warning in write_preflib(long_preferences(long, vote, id_cols = ID, rank_col = ## Rank, : Missing `modification_date`, using today's date(2025-09-03).  ## Warning in write_preflib(long_preferences(long, vote, id_cols = ID, rank_col = ## Rank, : Missing `modification_type`: the PrefLib format requires this to be ## specified. Using `NA`.  ## # FILE NAME: NA ## # TITLE: NA ## # DESCRIPTION:  ## # DATA TYPE: soc ## # MODIFICATION TYPE: NA ## # RELATES TO:  ## # RELATED FILES:  ## # PUBLICATION DATE: 2025-09-03 ## # MODIFICATION DATE: 2025-09-03 ## # NUMBER ALTERNATIVES: 3 ## # NUMBER VOTERS: 3 ## # NUMBER UNIQUE ORDERS: 3 ## # ALTERNATIVE NAME 1: Allie ## # ALTERNATIVE NAME 2: Beatriz ## # ALTERNATIVE NAME 3: Charles ## 1: 1,2,3 ## 1: 3,2,1 ## 1: 2,1,3"},{"path":"https://fleverest.github.io/prefio/index.html","id":"projects-using-prefio","dir":"","previous_headings":"","what":"Projects using prefio","title":"Structures for Preference Data","text":"PrefLib formatter New South Wales Legislative Assembly Elections uses prefio process public election datasets PrefLib formats. R package elections.dtree uses prefio tracking ballots observed Dirichlet-tree model.","code":""},{"path":[]},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Adjacency Matrix for a vector of preferences — adjacency","title":"Compute the Adjacency Matrix for a vector of preferences — adjacency","text":"Convert set preferences adjacency matrix summarising wins losses pairs items.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Adjacency Matrix for a vector of preferences — adjacency","text":"","code":"adjacency(x, preferences_col = NULL, frequency_col = NULL, ...)"},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Adjacency Matrix for a vector of preferences — adjacency","text":"x preferences object tibble preferences-typed column. preferences_col <tidy-select> x tibble, column containing preferences. frequency_col <tidy-select> x tibble, column containing frequency preferences. provided, row considered observed single time. ... Currently unused.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Adjacency Matrix for a vector of preferences — adjacency","text":"\\(N\\) \\(N\\) matrix, \\(N\\) number items.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Adjacency Matrix for a vector of preferences — adjacency","text":"preferences object \\(N\\) items, adjacency matrix \\(N\\) \\(N\\) matrix, element \\((, j)\\) number times item \\(\\) wins item \\(j\\). example, preferences {1} > {3, 4} > {2}, item 1 wins items 2, 3, 4, items 3 4 win item 2. weights specified, values adjacency matrix weighted counts.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Adjacency Matrix for a vector of preferences — adjacency","text":"","code":"x <- tibble::tribble(   ~voter_id, ~species, ~food, ~ranking,   1, \"Rabbit\", \"Apple\", 1,   1, \"Rabbit\", \"Banana\", 2,   1, \"Rabbit\", \"Carrot\", 3,   2, \"Monkey\", \"Banana\", 1,   2, \"Monkey\", \"Apple\", 2,   2, \"Monkey\", \"Carrot\", 3 ) |>   long_preferences(     food_preference,     id_cols = voter_id,     item_col = food,     rank_col = ranking   ) |>   dplyr::pull(food_preference) |>   adjacency()"},{"path":"https://fleverest.github.io/prefio/reference/pref_add_unranked.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete preferences by adding unselected items as last place occurrances. — pref_add_unranked","title":"Complete preferences by adding unselected items as last place occurrances. — pref_add_unranked","text":"Complete preferences adding unselected items last place occurrances.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_add_unranked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete preferences by adding unselected items as last place occurrances. — pref_add_unranked","text":"","code":"pref_add_unranked(x)"},{"path":"https://fleverest.github.io/prefio/reference/pref_add_unranked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete preferences by adding unselected items as last place occurrances. — pref_add_unranked","text":"x vector preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_add_unranked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complete preferences by adding unselected items as last place occurrances. — pref_add_unranked","text":"new vector preferences, selection starting corresponding selections made x, unranked items placed last.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_add_unranked.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete preferences by adding unselected items as last place occurrances. — pref_add_unranked","text":"","code":"# Complete partial rankings by adding unranked items last pref_add_unranked(preferences(c(\"a > b\", \"c > a\", \"b\"))) #> [1] [a > b > c] [c > a > b] [b > a = c]"},{"path":"https://fleverest.github.io/prefio/reference/pref_blank.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a preference is blank. — pref_blank","title":"Check if a preference is blank. — pref_blank","text":"Check preference blank.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_blank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a preference is blank. — pref_blank","text":"","code":"pref_blank(x)"},{"path":"https://fleverest.github.io/prefio/reference/pref_blank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a preference is blank. — pref_blank","text":"x vector preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_blank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a preference is blank. — pref_blank","text":"logical vector indicating preferences blank, .e., [].","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_blank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a preference is blank. — pref_blank","text":"","code":"pref_blank(preferences(c(\"a > b > c\", \"\", \"b > c\"))) #> [1] FALSE  TRUE FALSE"},{"path":"https://fleverest.github.io/prefio/reference/pref_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance matrix for preferences, calculated using the rankings matrix. — pref_cov","title":"Covariance matrix for preferences, calculated using the rankings matrix. — pref_cov","text":"Covariance matrix preferences, calculated using rankings matrix.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance matrix for preferences, calculated using the rankings matrix. — pref_cov","text":"","code":"pref_cov(x, preferences_col = NULL, frequency_col = NULL, ...)"},{"path":"https://fleverest.github.io/prefio/reference/pref_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance matrix for preferences, calculated using the rankings matrix. — pref_cov","text":"x vector preferences, tibble column preferences. preferences_col <tidy-select> x tibble, column containing preferences. frequency_col <tidy-select> x tibble, column containing frequency preferences. provided, row considered observed single time. ... Extra arguments passed stats::cov.wt.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance matrix for preferences, calculated using the rankings matrix. — pref_cov","text":"covariance matrix containing covariances ranks assigned item pairs.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariance matrix for preferences, calculated using the rankings matrix. — pref_cov","text":"","code":"# Simple covariance on a vector of preferences prefs <- preferences(c(\"a > b > c\", \"b > c > a\", \"c > a > b\")) pref_cov(prefs) #> $cov #>      a    b    c #> a  1.0 -0.5 -0.5 #> b -0.5  1.0 -0.5 #> c -0.5 -0.5  1.0 #>  #> $center #> a b c  #> 2 2 2  #>  #> $n.obs #> [1] 3 #>   # Weighted covariance by frequency df <- tibble::tibble(   prefs = preferences(c(\"a > b > c\", \"b > c > a\")),   freq = c(3, 2) ) pref_cov(df, preferences_col = prefs, frequency_col = freq) #> $cov #>      a    b    c #> a  1.2 -0.6 -0.6 #> b -0.6  0.3  0.3 #> c -0.6  0.3  0.3 #>  #> $center #>   a   b   c  #> 1.8 1.6 2.6  #>  #> $n.obs #> [1] 5 #>"},{"path":"https://fleverest.github.io/prefio/reference/pref_get_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the item(s) assigned a specific rank, e.g., first. — pref_get_items","title":"Get the name of the item(s) assigned a specific rank, e.g., first. — pref_get_items","text":"Get name item(s) assigned specific rank, e.g., first.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_get_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the item(s) assigned a specific rank, e.g., first. — pref_get_items","text":"","code":"pref_get_items(x, rank, drop = FALSE)"},{"path":"https://fleverest.github.io/prefio/reference/pref_get_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the item(s) assigned a specific rank, e.g., first. — pref_get_items","text":"x vector preferences. rank single integer, rank like inspect. drop FALSE (default), blank preferences remain. TRUE, blank preferences omitted.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_get_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the item(s) assigned a specific rank, e.g., first. — pref_get_items","text":"list containing name(s) item(s) ranked rank preferences x.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_get_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the item(s) assigned a specific rank, e.g., first. — pref_get_items","text":"","code":"# Get items ranked first pref_get_items(preferences(c(\"a > b > c\", \"b = c > a\")), rank = 1) #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"b\" \"c\" #>  # Get items ranked second pref_get_items(preferences(c(\"a > b > c\", \"b = c > a\")), rank = 2) #> [[1]] #> [1] \"b\" #>  #> [[2]] #> [1] \"a\" #>  # Get items ranked first, dropping blank preferences pref_get_items(preferences(c(\"a > b > c\", \"\", \"b = c > a\")), rank = 1, drop = TRUE) #> [[1]] #> [1] \"a\" #>  #> [[2]] #> [1] \"b\" \"c\" #>"},{"path":"https://fleverest.github.io/prefio/reference/pref_get_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the rank assigned to a specific item in a set of preferences. — pref_get_rank","title":"Get the rank assigned to a specific item in a set of preferences. — pref_get_rank","text":"Get rank assigned specific item set preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_get_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the rank assigned to a specific item in a set of preferences. — pref_get_rank","text":"","code":"pref_get_rank(x, item_name)"},{"path":"https://fleverest.github.io/prefio/reference/pref_get_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the rank assigned to a specific item in a set of preferences. — pref_get_rank","text":"x vector preferences. item_name name item extract rank .","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_get_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the rank assigned to a specific item in a set of preferences. — pref_get_rank","text":"rank item_name preferences x.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_get_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the rank assigned to a specific item in a set of preferences. — pref_get_rank","text":"","code":"pref_get_rank(preferences(c(\"a > b > c\", \"b > c = a\", \"\")), \"a\") #> [1]  1  2 NA"},{"path":"https://fleverest.github.io/prefio/reference/pref_irv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the instant-runoff voting winner for a set of preferences. — pref_irv","title":"Compute the instant-runoff voting winner for a set of preferences. — pref_irv","text":"rudimentary implementation IRV counting algorithm. handle ties elegantly, used demonstration purposes. implementation eliminates candidates fewest first-choice votes round one candidate majority fewer two candidates remain.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_irv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the instant-runoff voting winner for a set of preferences. — pref_irv","text":"","code":"pref_irv(x, preferences_col = NULL, frequency_col = NULL)"},{"path":"https://fleverest.github.io/prefio/reference/pref_irv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the instant-runoff voting winner for a set of preferences. — pref_irv","text":"x vector preferences, tibble column preferences. preferences_col <tidy-select> x tibble, column containing preferences. frequency_col <tidy-select> x tibble, column containing frequency preferences. provided, row considered observed single time.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_irv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the instant-runoff voting winner for a set of preferences. — pref_irv","text":"list containing: winner winning candidate(s) IRV counting rounds list tibbles, containing vote tallies round eliminated Character vector eliminated candidates order","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_irv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the instant-runoff voting winner for a set of preferences. — pref_irv","text":"","code":"# Multi-round election with four candidates prefs <- preferences(c(   \"alice > bob > charlie > david\",   \"alice > bob > charlie > david\",   \"alice > charlie > bob > david\",   \"bob > alice > charlie > david\",   \"bob > charlie > alice > david\",   \"bob > charlie > alice > david\",   \"charlie > david > alice > bob\",   \"charlie > david > bob > alice\",   \"david > charlie > bob > alice\",   \"david > charlie > bob > alice\" )) result <- pref_irv(prefs) result$winner # Final winner after elimination rounds #> [1] \"bob\" result$rounds # Vote tallies for each round #> [[1]] #> # A tibble: 4 × 2 #>   candidate value #>   <chr>     <int> #> 1 alice         3 #> 2 bob           3 #> 3 charlie       2 #> 4 david         2 #>  #> [[2]] #> # A tibble: 2 × 2 #>   candidate value #>   <chr>     <int> #> 1 alice         4 #> 2 bob           6 #>   # Using aggregated data frame df <- tibble::tibble(   prefs = preferences(c(     \"alice > bob > charlie > david\",     \"alice > charlie > bob > david\",     \"bob > alice > charlie > david\",     \"bob > charlie > alice > david\",     \"charlie > david > alice > bob\",     \"charlie > david > bob > alice\",     \"david > charlie > bob > alice\"   )),   freq = c(2, 1, 1, 2, 1, 1, 2) ) pref_irv(df, prefs, freq) #> $winner #> [1] \"bob\" #>  #> $rounds #> $rounds[[1]] #> # A tibble: 4 × 2 #>   candidate value #>   <chr>     <int> #> 1 alice         3 #> 2 bob           3 #> 3 charlie       2 #> 4 david         2 #>  #> $rounds[[2]] #> # A tibble: 2 × 2 #>   candidate value #>   <chr>     <int> #> 1 alice         4 #> 2 bob           6 #>  #>  #> $eliminated #> [1] \"alice\"   \"charlie\" \"david\"   #>"},{"path":"https://fleverest.github.io/prefio/reference/pref_keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep only specified items from preferences. — pref_keep","title":"Keep only specified items from preferences. — pref_keep","text":"Keep specified items preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep only specified items from preferences. — pref_keep","text":"","code":"pref_keep(x, items)"},{"path":"https://fleverest.github.io/prefio/reference/pref_keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep only specified items from preferences. — pref_keep","text":"x vector preferences. items names items kept preferences x.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_keep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep only specified items from preferences. — pref_keep","text":"new vector preferences, containing items selection.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_keep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep only specified items from preferences. — pref_keep","text":"","code":"# Keep only 'a' and 'c' pref_keep(preferences(c(\"a > b > c\", \"b > c > a\")), c(\"a\", \"c\")) #> [1] [a > c] [c > a]"},{"path":"https://fleverest.github.io/prefio/reference/pref_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the length (number of rankings) of a preference. — pref_length","title":"Check the length (number of rankings) of a preference. — pref_length","text":"Check length (number rankings) preference.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the length (number of rankings) of a preference. — pref_length","text":"","code":"pref_length(x)"},{"path":"https://fleverest.github.io/prefio/reference/pref_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the length (number of rankings) of a preference. — pref_length","text":"x vector preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the length (number of rankings) of a preference. — pref_length","text":"number items listed preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the length (number of rankings) of a preference. — pref_length","text":"","code":"pref_length(preferences(c(\"a > b > c\", \"\", \"b > c\"))) #> [1] 3 0 2"},{"path":"https://fleverest.github.io/prefio/reference/pref_omit.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove specified items from preferences. — pref_omit","title":"Remove specified items from preferences. — pref_omit","text":"Remove specified items preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_omit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove specified items from preferences. — pref_omit","text":"","code":"pref_omit(x, items)"},{"path":"https://fleverest.github.io/prefio/reference/pref_omit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove specified items from preferences. — pref_omit","text":"x vector preferences. items names items removed preferences x.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_omit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove specified items from preferences. — pref_omit","text":"new vector preferences, items removed selection.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_omit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove specified items from preferences. — pref_omit","text":"","code":"# Remove 'b' pref_omit(preferences(c(\"a > b > c\", \"b > c > a\")), \"b\") #> [1] [a > c] [c > a] # Remove 'b' and 'd' pref_omit(preferences(c(\"a > b > c > d\", \"b > c > a > d\")), c(\"b\", \"d\")) #> [1] [a > c] [c > a]"},{"path":"https://fleverest.github.io/prefio/reference/pref_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Eliminate lowest (or highest) ranked items from preferences. — pref_pop","title":"Eliminate lowest (or highest) ranked items from preferences. — pref_pop","text":"Eliminate lowest (highest) ranked items preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eliminate lowest (or highest) ranked items from preferences. — pref_pop","text":"","code":"pref_pop(x, n = 1L, lowest = TRUE, drop = FALSE)"},{"path":"https://fleverest.github.io/prefio/reference/pref_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eliminate lowest (or highest) ranked items from preferences. — pref_pop","text":"x vector preferences. n number times remove bottom rank. lowest TRUE, eliminates lowest ranked item(s) selection. drop TRUE, drops blank preferences output.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eliminate lowest (or highest) ranked items from preferences. — pref_pop","text":"new vector preferences equal x least preferred selection dropped selection.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eliminate lowest (or highest) ranked items from preferences. — pref_pop","text":"","code":"# Remove the lowest ranked item from each preference pref_pop(preferences(c(\"a > b > c\", \"b > c > a\"))) #> [1] [a > b] [b > c]  # Remove the 2 lowest ranked items pref_pop(preferences(c(\"a > b > c > d\", \"b > c > a > d\")), n = 2) #> [1] [a > b] [b > c]  # Remove the highest ranked item instead pref_pop(preferences(c(\"a > b > c\", \"b > c > a\")), lowest = FALSE) #> [1] [b > c] [c > a]  # Remove blank preferences that result from popping pref_pop(preferences(c(\"a > b\", \"c\", \"\")), drop = TRUE) #> [1] [a]"},{"path":"https://fleverest.github.io/prefio/reference/pref_rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse preference rankings — pref_rev","title":"Reverse preference rankings — pref_rev","text":"Reverse preference rankings","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse preference rankings — pref_rev","text":"","code":"pref_rev(x, ...)"},{"path":"https://fleverest.github.io/prefio/reference/pref_rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse preference rankings — pref_rev","text":"x vector preferences. ... used.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_rev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse preference rankings — pref_rev","text":"vector preferences rankings reversed (first becomes last, etc.)","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse preference rankings — pref_rev","text":"","code":"pref_rev(preferences(c(\"a > b > c\", \"b > c > a\"))) #> [1] [c > b > a] [a > c > b]"},{"path":"https://fleverest.github.io/prefio/reference/pref_trunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate preferences to a maximum number of ranks. — pref_trunc","title":"Truncate preferences to a maximum number of ranks. — pref_trunc","text":"Truncate preferences maximum number ranks.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_trunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate preferences to a maximum number of ranks. — pref_trunc","text":"","code":"pref_trunc(x, n = 1L, bottom = FALSE)"},{"path":"https://fleverest.github.io/prefio/reference/pref_trunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate preferences to a maximum number of ranks. — pref_trunc","text":"x vector preferences. n maximum number ranks include (positive) number ranks drop (negative). Must integer. bottom FALSE (default), operates top ranks. TRUE, operates bottom ranks.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_trunc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate preferences to a maximum number of ranks. — pref_trunc","text":"vector preferences selection truncated according parameters.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_trunc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate preferences to a maximum number of ranks. — pref_trunc","text":"","code":"# Keep only the top 2 ranks pref_trunc(preferences(c(\"a > b > c > d\", \"b > c > a\")), n = 2) #> [1] [a > b] [b > c] # Keep only the bottom 2 ranks pref_trunc(preferences(c(\"a > b > c > d\", \"b > c > a\")), n = 2, bottom = TRUE) #> [1] [c > d] [c > a] # Drop the bottom 2 ranks (keep top ranks) pref_trunc(preferences(c(\"a > b > c > d\", \"b > c > a\")), n = -2) #> [1] [a > b] [b]     # Drop the top 2 ranks (keep bottom ranks) pref_trunc(preferences(c(\"a > b > c > d\", \"b > c > a\")), n = -2, bottom = TRUE) #> [1] [c > d] [a]"},{"path":"https://fleverest.github.io/prefio/reference/pref_type.html","id":null,"dir":"Reference","previous_headings":"","what":"pref_type — pref_type","title":"pref_type — pref_type","text":"Ordinal preferences can order every item, can order subset. ordinal preference datasets contain ties items given rank. Hence, four distinct types preferential data: soc Strict Orders - Complete List soi Strict Orders - Incomplete List toc Orders Ties - Complete List toi Orders Ties - Incomplete List","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pref_type — pref_type","text":"","code":"pref_type(x, n_items = NULL)"},{"path":"https://fleverest.github.io/prefio/reference/pref_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pref_type — pref_type","text":"x preferences object (vector data representing preferences) n_items number items, needed assess whether selection complete . Defaults nlevels(x) x class preferences, otherwise defaults length longest preference.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pref_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pref_type — pref_type","text":"One c(\"soc\", \"soi\", \"toc\", \"toi\"), indicating type preferences x (without ties / complete incomplete rankings).","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferences Objects — preferences","title":"Preferences Objects — preferences","text":"tidy interface working ordinal preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferences Objects — preferences","text":"","code":"long_preferences(   data,   col,   id_cols = NULL,   rank_col = NULL,   item_col = NULL,   item_names = NULL,   verbose = TRUE,   unused_fn = NULL,   na_action = c(\"drop_rows\", \"drop_preferences\"),   ... )  wide_preferences(   data,   col = NULL,   ranking_cols = NULL,   verbose = TRUE,   na_action = c(\"keep_as_partial\", \"drop_preferences\"),   ... )  as_preferences(strings, sep = \">\", equality = \"=\", descending = TRUE)  preferences(   strings = character(0L),   sep = \">\",   equality = \"=\",   descending = TRUE )  # S3 method for class 'preferences' format(x, ...)  # S3 method for class 'preferences' levels(x, ...)"},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferences Objects — preferences","text":"data data.frame tibble extract preferences col name new column, string symbol. id_cols <tidy-select> columns group dataset extract single preference selection. rank_col <tidy-select> data long-format: column representing rank associated item. item_col <tidy-select> data long-format: column representing items name index, case item_names parameter also passed. item_names names full set items. necessary dataset specifies items index rather name, items appear preference selection. verbose TRUE, diagnostic messages sent stdout. unused_fn format=\"long\", summarise values unused columns (specified id_cols, item_col, rank_col). default action drop unused columns. can named list (e.g. list(column = function)) want apply different summaries different columns keep specific unused columns, can single function applied across unused columns. na_action Specifies handle NA values. long_preferences \"drop_rows\" Removes individual rows containing NA values processing \"drop_preferences\" Removes entire preference selection contains NA wide_preferences \"keep\" Interprets rows containing NAs partial orderings \"drop\" Removes preferences NA ranks ... Unused. ranking_cols <tidy-select> columns extract wide-format preferences. strings character vector preference strings sep Character separating items string (default: \">\") equality Character representing equality items (default: \"=\") descending TRUE, parse descending order preferences. x vector preferences. format format data: one \"ordering\", \"ranking\", \"long\" (see ). default, data assumed \"long\" format.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preferences Objects — preferences","text":"preferences object, modified tibble column preferences data data.frame tibble.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preferences Objects — preferences","text":"","code":"# Votes cast by two animals ranking a variety of fruits and vegetables. # This is not real data, I made this up. x <- tibble::tribble(   ~voter_id, ~species, ~food, ~ranking,   1, \"Rabbit\", \"Apple\", 1,   1, \"Rabbit\", \"Carrot\", 2,   1, \"Rabbit\", \"Banana\", 3,   2, \"Monkey\", \"Banana\", 1,   2, \"Monkey\", \"Apple\", 2,   2, \"Monkey\", \"Carrot\", 3 ) # Process preferencial data into a single column. x |>   long_preferences(     food_preference,     id_cols = voter_id,     item_col = food,     rank_col = ranking   ) #> # A tibble: 2 × 2 #>   voter_id           food_preference #>      <dbl>                <prefrncs> #> 1        1 [Apple > Carrot > Banana] #> 2        2 [Banana > Apple > Carrot] # The same, but keep the species data. x |>   long_preferences(     food_preference,     id_cols = voter_id,     item_col = food,     rank_col = ranking,     unused_fn = list(species = dplyr::first)   ) #> # A tibble: 2 × 3 #>   voter_id species           food_preference #>      <dbl> <chr>                  <prefrncs> #> 1        1 Rabbit  [Apple > Carrot > Banana] #> 2        2 Monkey  [Banana > Apple > Carrot]"},{"path":"https://fleverest.github.io/prefio/reference/prefio-package.html","id":null,"dir":"Reference","previous_headings":"","what":"prefio: Structures for Preference Data — prefio-package","title":"prefio: Structures for Preference Data — prefio-package","text":"Convenient structures creating, sourcing, reading, writing manipulating ordinal preference data. Methods writing /PrefLib formats. See Nicholas Mattei Toby Walsh \"PrefLib: Library Preference Data\" (2013) doi:10.1007/978-3-642-41575-3_20 .","code":""},{"path":[]},{"path":"https://fleverest.github.io/prefio/reference/prefio-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prefio: Structures for Preference Data — prefio-package","text":"Maintainer: Floyd Everest @floydeverest.com (ORCID) Authors: Heather Turner ht@heatherturner.net (ORCID) Damjan Vukcevic damjan@vukcevic.net (ORCID)","code":""},{"path":"https://fleverest.github.io/prefio/reference/ranking_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","title":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","text":"Convert set preferences rankings matrix, preference defines single row output. columns rankings matrix give vector ranks assigned corresponding candidate.","code":""},{"path":"https://fleverest.github.io/prefio/reference/ranking_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","text":"","code":"ranking_matrix(x, preferences_col = NULL, frequency_col = NULL, ...)"},{"path":"https://fleverest.github.io/prefio/reference/ranking_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","text":"x preferences object tibble preferences-typed column. preferences_col <tidy-select> x tibble, column containing preferences. frequency_col <tidy-select> x tibble, column containing frequency preferences. provided, row considered observed single time. ... Currently unused.","code":""},{"path":"https://fleverest.github.io/prefio/reference/ranking_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","text":"\\(N\\) \\(M\\) matrix, \\(N\\) number preferences, \\(M\\) number items.","code":""},{"path":"https://fleverest.github.io/prefio/reference/ranking_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","text":"preferences vector length \\(N\\) \\(M\\) items, rankings matrix \\(N\\) \\(M\\) matrix, element \\((, j)\\) rank assigned candidate \\(j\\) \\(\\)th selection.","code":""},{"path":"https://fleverest.github.io/prefio/reference/ranking_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Rankings Matrix for a vector of preferences — ranking_matrix","text":"","code":"x <- tibble::tribble(   ~voter_id, ~species, ~food, ~ranking,   1, \"Rabbit\", \"Apple\", 1,   1, \"Rabbit\", \"Banana\", 2,   1, \"Rabbit\", \"Carrot\", 3,   2, \"Monkey\", \"Banana\", 1,   2, \"Monkey\", \"Apple\", 2,   2, \"Monkey\", \"Carrot\", 3 ) |>   long_preferences(     food_preference,     id_cols = voter_id,     item_col = food,     rank_col = ranking   ) |>   dplyr::pull(food_preference) |>   ranking_matrix()"},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Ordinal Preference Data From PrefLib — read_preflib","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Read orderings .soc, .soi, .toc .toi files storing ordinal preference data format defined {PrefLib}: Library Preferences preferences object.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"","code":"read_preflib(   file,   from_preflib = FALSE,   preflib_url = \"https://raw.githubusercontent.com/PrefLib/PrefLib-Data/main/datasets/\" )"},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"file preferential data file, conventionally extension .soc, .soi, .toc .toi according data type. from_preflib logical , TRUE attempt source file PrefLib adding database HTTP prefix. preflib_url URL preprended file, from_preflib TRUE.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"tibble two columns: preferences frequency. preferences column contains preferential orderings file, frequency column relative frequency selection.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Note PrefLib refers items ordered \"alternatives\". file types supported .soc Strict Orders - Complete List .soi Strict Orders - Incomplete List .toc Orders Ties - Complete List .toi Orders Ties - Incomplete List numerically coded orderings frequencies read tibble, storing original metadata \"preflib\" attribute. PrefLib file may corrupt, sense ordered alternatives match names. case, file still read, warning.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Netflix cities datasets used examples Caragiannis et al (2017) Bennet Lanning (2007) respectively. data sets require citation re-use.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Mattei, N. Walsh, T. (2013) PrefLib: Library Preference Data. Proceedings Third International Conference Algorithmic Decision Theory (ADT 2013). Lecture Notes Artificial Intelligence, Springer. Bennett, J. Lanning, S. (2007) Netflix Prize. Proceedings KDD Cup Workshops.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"","code":"# Can take a little while depending on speed of internet connection  # \\donttest{ # strict complete orderings of four films on Netflix netflix <- read_preflib(\"00004 - netflix/00004-00000138.soc\", from_preflib = TRUE) head(netflix) #> # A tibble: 6 × 2 #>                                                                     preferences #>                                                                      <prefrncs> #> 1 [Beverly Hills Cop > Mean Girls > Mission: Impossible II > The Mummy Returns] #> 2 [Mean Girls > Beverly Hills Cop > Mission: Impossible II > The Mummy Returns] #> 3 [Beverly Hills Cop > Mean Girls > The Mummy Returns > Mission: Impossible II] #> 4 [Mean Girls > Beverly Hills Cop > The Mummy Returns > Mission: Impossible II] #> 5 [Beverly Hills Cop > Mission: Impossible II > Mean Girls > The Mummy Returns] #> 6 [The Mummy Returns > Beverly Hills Cop > Mean Girls > Mission: Impossible II] #> # ℹ 1 more variable: frequency <int> levels(netflix$preferences) #> [1] \"Mean Girls\"             \"Beverly Hills Cop\"      \"The Mummy Returns\"      #> [4] \"Mission: Impossible II\"  # strict incomplete orderings of 6 random cities from 36 in total cities <- read_preflib(\"00034 - cities/00034-00000001.soi\", from_preflib = TRUE) # }"},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"Write preferences .soc, .soi, .toc .toi file types, defined PrefLib specification: {PrefLib}: Library Preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"","code":"write_preflib(   x,   file = \"\",   preferences_col = NULL,   frequency_col = NULL,   title = NULL,   publication_date = NULL,   modification_type = NULL,   modification_date = NULL,   description = NULL,   relates_to = NULL,   related_files = NULL )"},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"x preferences object tibble preferences-typed column write file. file Either character string naming file writeable, open connection. empty string \"\" write stdout. preferences_col <tidy-select> x tibble, column containing preferences written file. provided x tibble, frequency_col <tidy-select> x tibble, column containing frequency preferences. provided, row considered observed single time. title title data file, instance name election represented data file. provided, check presence attr(x, \"preflib\"), exists check TITLE. publication_date date data file published first time. provided, check presence attr(x, \"preflib\"), exists check PUBLICATION DATE. modification_type modification type data: one original, induced, imbued synthetic (see Details). provided, check presence attr(x, \"preflib\"), exists check MODIFICATION TYPE. modification_date last time data modified. provided, check presence attr(x, \"preflib\"), exists check MODIFICATION DATE. description description data file, providing additional information . provided, check presence attr(x, \"preflib\"), exists check DESCRIPTION. relates_to name data file current file relates , typically source file case current file derived another one. provided, check presence attr(x, \"preflib\"), exists check RELATES . related_files list data files related one, comma separated. provided, check presence attr(x, \"preflib\"), exists check RELATED FILES.","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"return value. Output written file stdout.","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"file types supported .soc Strict Orders - Complete List .soi Strict Orders - Incomplete List .toc Orders Ties - Complete List .toi Orders Ties - Incomplete List PrefLib format specification requires additional metadata. Note additional metadata required PrefLib specification necessarily required write_preflib method; missing fields required PrefLib format simply show \"NA\". TITLE (required) title data file, instance year election represented data file. DESCRIPTION (optional) description data file, providing additional information . RELATES (optional) name data file current file relates , typically source file case current file derived another one. RELATED FILES (optional) list data files related one, comma separated. PUBLICATION DATE (required) date data file published first time. MODIFICATION TYPE (required) modification type data. One : original Data converted PrefLib format. induced Data induced another context. example, computing pairwise relation set strict total orders. assumptions made create files, just change expression language. imbued Data imbued extra information. example, extending incomplete partial order placing unranked candidates tied end. synthetic Data generated artificially. MODIFICATION DATE (optional) last time data modified. addition fields, required PrefLib fields generated automatically depending arguments write_preflib() attributes aggregated_preferences object written file: FILE NAME name output file. DATA TYPE data type (one soc, soi, toc toi). NUMBER ALTERNATIVES number items. ALTERNATIVE NAME X name item, X ranges 0 length(items). NUMBER VOTERS total number orderings. NUMBER UNIQUE ORDERS number distinct orderings. Note PrefLib refers items \"alternatives\". \"alternatives\" output file \"items\" aggregated_preferences object.","code":""},{"path":"https://fleverest.github.io/prefio/news/index.html","id":"prefio-020","dir":"Changelog","previous_headings":"","what":"prefio 0.2.0","title":"prefio 0.2.0","text":"🎉🥳 Made prefio tidy! 🎊🎆 Added cool new hex sticker! Reimplemented preferences using vctrs. Implemented methods required dplyr operations. Added suite tools operating preferences. instant-runoff voting algorithm covariance matrix based rankings matrix representation Improved preflib interface fail gracefully, prefio 0.1.1 taken CRAN.","code":""},{"path":"https://fleverest.github.io/prefio/news/index.html","id":"prefio-011","dir":"Changelog","previous_headings":"","what":"prefio 0.1.1","title":"prefio 0.1.1","text":"CRAN release: 2023-09-07 Changed string formatting preferences (now displays [> B > C] rather \"> B > C\"). Fixed bug loading preferences orderings format. Allows empty preferences object (displays preferences(0)). Allow blank preferences (displays [blank]).","code":""},{"path":"https://fleverest.github.io/prefio/news/index.html","id":"prefio-010","dir":"Changelog","previous_headings":"","what":"prefio 0.1.0","title":"prefio 0.1.0","text":"CRAN release: 2023-03-08 initial release prefio.","code":""}]
