[{"path":"https://fleverest.github.io/prefio/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Floyd Everest. Author, maintainer. Heather Turner. Author. Damjan Vukcevic. Author.","code":""},{"path":"https://fleverest.github.io/prefio/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Everest F, Turner H, Vukcevic D (2023). prefio: Structures Preference Data. https://github.com/fleverest/prefio/, https://fleverest.github.io/prefio/.","code":"@Manual{,   title = {prefio: Structures for Preference Data},   author = {Floyd Everest and Heather Turner and Damjan Vukcevic},   year = {2023},   note = {https://github.com/fleverest/prefio/, https://fleverest.github.io/prefio/}, }"},{"path":[]},{"path":"https://fleverest.github.io/prefio/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Structures for Preference Data","text":"Ordinal Preference datasets used many research communities including, limited , work recommender systems, computational social choice, voting systems combinatorial optimization. prefio R package provides set functions enable users perform wide range preference analysis tasks, including preference aggregation, pairwise comparison summaries convenient IO operations. makes easier researchers professionals perform common data analysis preprocessing tasks datasets.","code":""},{"path":"https://fleverest.github.io/prefio/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Structures for Preference Data","text":"package may installed CRAN via development version can installed via","code":"install.packages(\"prefio\") # install.packages(\"remotes\") remotes::install_github(\"fleverest/prefio\")"},{"path":"https://fleverest.github.io/prefio/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Structures for Preference Data","text":"prefio provides convenient interface processing data tabular formats well sourcing data one unified PrefLib formats, including convenient method downloading data files directly PrefLib R session.","code":""},{"path":"https://fleverest.github.io/prefio/index.html","id":"processing-tabular-data","dir":"","previous_headings":"Usage","what":"Processing tabular data","title":"Structures for Preference Data","text":"Preference data can come many forms. Commonly preference data either represented either long-format row corresponding particular ranking chosen single item:, e.g: Three orderings items {, B, C} long-format. data can converted data.frame preferences object: Another way tabulating orderings unique ordering single row, column representing rank given particular item: Three orderings items {, B, C} “rankings” format. data can converted data.frame preferences object:","code":"long <- data.frame(   ID = rep(1:3, each = 3),   ItemName = LETTERS[rep(1:3, 3)],   Rank = c(1, 2, 3, 3, 2, 1, 2, 1, 3) ) prefs <- preferences(long,   format = \"long\",   id = \"ID\",   item = \"ItemName\",   rank = \"Rank\" ) print(prefs) ## [1] [A > B > C] [C > B > A] [B > A > C] rankings <- matrix(   c(     1, 2, 3,     3, 2, 1,     2, 1, 3   ),   nrow = 3,   byrow = TRUE ) colnames(rankings) <- LETTERS[1:3] prefs <- preferences(rankings,   format = \"ranking\" ) print(prefs) ## [1] [A > B > C] [C > B > A] [B > A > C]"},{"path":"https://fleverest.github.io/prefio/index.html","id":"reading-from-preflib","dir":"","previous_headings":"Usage","what":"Reading from PrefLib","title":"Structures for Preference Data","text":"Netflix Prize competition devised Netflix improve accuracy recommendation system. facilitate released ratings movies users system transformed preference data available PrefLib, (Bennett Lanning 2007). data set comprises rankings set 3 4 movies selected random. consider rankings just one set movies illustrate functionality prefio. PrefLib datafiles can downloaded --fly specifying argument from_preflib = TRUE read_preflib function: row corresponds unique ordering four movies dataset. number Netflix users assigned ordering given frequencies column. case, common ordering (68 voters specifying preferences) following:","code":"netflix <- read_preflib(\"netflix/00004-00000138.soc\", from_preflib = TRUE) head(netflix) ##                                preferences frequencies ## 1 [Beverly Hills Cop > Mean Girls > M ...]          68 ## 2 [Mean Girls > Beverly Hills Cop > M ...]          53 ## 3 [Beverly Hills Cop > Mean Girls > T ...]          49 ## 4 [Mean Girls > Beverly Hills Cop > T ...]          44 ## 5 [Beverly Hills Cop > Mission: Impos ...]          39 ## 6 [The Mummy Returns > Beverly Hills  ...]          37 print(netflix$preferences[1], width = 100) ## [1] [Beverly Hills Cop > Mean Girls > Mission: Impossible II > The Mummy Returns]"},{"path":"https://fleverest.github.io/prefio/index.html","id":"writing-to-preflib-formats","dir":"","previous_headings":"Usage","what":"Writing to Preflib formats","title":"Structures for Preference Data","text":"prefio provides convenient interface writing preferential datasets PrefLib formats. aid user, preferences() function automatically calculates metrics dataset required producing valid PrefLib files. example, can write prefs earlier: Note produces four warnings. warning corresponds field required official PrefLib format, may necessary internal use-cases. goal publish data PrefLib, warnings must resolved.","code":"write_preflib(prefs) ## Warning in write_preflib(prefs): Missing `title`: the PrefLib format requires a title to be specified. Using `NA`.  ## Warning in write_preflib(prefs): Missing `publication_date`, using today's date(2023-06-14).  ## Warning in write_preflib(prefs): Missing `modification_date`, using today's date(2023-06-14).  ## Warning in write_preflib(prefs): Missing `modification_type`: the PrefLib format requires this to be specified. Using ## `NA`.  ## # FILE NAME: NA ## # TITLE: NA ## # DESCRIPTION:  ## # DATA TYPE: soc ## # MODIFICATION TYPE: NA ## # RELATES TO:  ## # RELATED FILES:  ## # PUBLICATION DATE: 2023-06-14 ## # MODIFICATION DATE: 2023-06-14 ## # NUMBER ALTERNATIVES: 3 ## # NUMBER VOTERS: 3 ## # NUMBER UNIQUE ORDERS: 3 ## # ALTERNATIVE NAME 1: A ## # ALTERNATIVE NAME 2: B ## # ALTERNATIVE NAME 3: C ## 1: 1,2,3 ## 1: 3,2,1 ## 1: 2,1,3"},{"path":"https://fleverest.github.io/prefio/index.html","id":"projects-using-prefio","dir":"","previous_headings":"","what":"Projects using prefio","title":"Structures for Preference Data","text":"New South Wales Legislative Assembly Election Dataset uses prefio process public election datasets PrefLib formats. R package elections.dtree uses prefio tracking ballots observed Dirichlet-tree model.","code":""},{"path":[]},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Adjacency Matrix for a set of Preferences — adjacency","title":"Create an Adjacency Matrix for a set of Preferences — adjacency","text":"Convert set preferences adjacency matrix summarising wins losses pairs items","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Adjacency Matrix for a set of Preferences — adjacency","text":"","code":"adjacency(object, weights = NULL, ...)"},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Adjacency Matrix for a set of Preferences — adjacency","text":"object preferences object, object can coerced .preferences. weights optional vector weights preferences. ... arguments passed /methods.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Adjacency Matrix for a set of Preferences — adjacency","text":"\\(N\\) \\(N\\) matrix, \\(N\\) number items.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Adjacency Matrix for a set of Preferences — adjacency","text":"preferences object \\(N\\) items, adjacency matrix \\(N\\) \\(N\\) matrix, element \\((, j)\\) number times item \\(\\) wins item \\(j\\). example, preferences {1} > {3, 4} > {2}, item 1 wins items 2, 3, 4, items 3 4 win item 2. weights specified, values adjacency matrix weighted counts.","code":""},{"path":"https://fleverest.github.io/prefio/reference/adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Adjacency Matrix for a set of Preferences — adjacency","text":"","code":"X <- matrix(c(   2, 1, 2, 1, 2,   3, 2, 0, 0, 1,   1, 0, 2, 2, 3 ), nrow = 3, byrow = TRUE) X <- as.preferences(X, format = \"ranking\", item_names = LETTERS[1:5]) adjacency(X) #>   A B C D E #> A 0 0 1 1 1 #> B 3 0 2 1 2 #> C 1 1 0 0 2 #> D 2 1 1 0 3 #> E 1 1 0 0 0 #> attr(,\"class\") #> [1] \"adjacency\" \"matrix\"     adjacency(X, weights = c(1, 1, 2)) #>   A B C D E #> A 0 0 2 2 2 #> B 4 0 3 2 3 #> C 1 1 0 0 3 #> D 2 1 1 0 4 #> E 1 1 0 0 0 #> attr(,\"class\") #> [1] \"adjacency\" \"matrix\""},{"path":"https://fleverest.github.io/prefio/reference/aggregate.preferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Preferences — aggregate.preferences","title":"Aggregate Preferences — aggregate.preferences","text":"Aggregate preferences, returning aggregated_preferences object unique preferences frequencies. frequencies can accessed via function frequencies().","code":""},{"path":"https://fleverest.github.io/prefio/reference/aggregate.preferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Preferences — aggregate.preferences","text":"","code":"# S3 method for preferences aggregate(x, frequencies = NULL, ...)  as.aggregated_preferences(x, ...)  # S3 method for aggregated_preferences [(x, i, j, ...)  frequencies(x)"},{"path":"https://fleverest.github.io/prefio/reference/aggregate.preferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Preferences — aggregate.preferences","text":"x preferences object aggregate(); object can coerced aggregated_preferences object .aggregated_preferences(), otherwise aggregated_preferences object. frequencies vector frequencies preferences previously aggregated. ... Additional arguments, currently unused. indices specifying preferences extract. j indices specifying items extract. .aggregated_preferences TRUE create aggregated_preferences object indexed preferences Otherwise index underlying matrix ranks return data frame corresponding frequencies.","code":""},{"path":"https://fleverest.github.io/prefio/reference/aggregate.preferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Preferences — aggregate.preferences","text":"data frame class aggregated_preferences, columns: preferences preferences object unique preferences frequencies corresponding frequencies. Methods available rbind() .matrix().","code":""},{"path":"https://fleverest.github.io/prefio/reference/aggregate.preferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Preferences — aggregate.preferences","text":"","code":"# create a preferences object with duplicated preferences R <- matrix(c(   1, 2, 0, 0,   0, 1, 2, 3,   2, 1, 1, 0,   1, 2, 0, 0,   2, 1, 1, 0,   1, 0, 3, 2 ), nrow = 6, byrow = TRUE) colnames(R) <- c(\"apple\", \"banana\", \"orange\", \"pear\") R <- as.preferences(R, format = \"ranking\")  # aggregate the preferences A <- aggregate(R)  # Or pass `aggregate = TRUE` to `as.preferences` A <- as.preferences(R, aggregate = TRUE)  # Subsetting applies to the preferences, e.g. first two unique preferences A[1:2] #>                        preferences frequencies #> 1 [orange = pear > apple > banana]           2 #> 2 [pear > banana = orange > apple]           2  # (partial) preferences projected to items 2-4 only A[, 2:4] #>                preferences frequencies #> 1 [orange = pear > banana]           2 #> 2 [pear > banana = orange]           2 #> 3 [banana > orange > pear]           1 #> 4 [banana > pear > orange]           1  # Project preferences onto their hightest ranking A[, 1, by.rank = TRUE] #>       preferences frequencies #> 1 [orange = pear]           2 #> 2          [pear]           2 #> 3         [apple]           1 #> 4        [banana]           1  # convert to a matrix as.matrix(A) #>      apple banana orange pear frequencies #> [1,]     2      3      1    1           2 #> [2,]     3      2      2    1           2 #> [3,]     1      2      3    4           1 #> [4,]     2      1      4    3           1"},{"path":"https://fleverest.github.io/prefio/reference/choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Choices Object — choices","title":"Choices Object — choices","text":"Convert set preferences list choices, alternatives, preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choices Object — choices","text":"","code":"choices(preferences, names = FALSE)"},{"path":"https://fleverest.github.io/prefio/reference/choices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choices Object — choices","text":"preferences preferences object, object can coerced .preferences. names logical: TRUE use object names returned choices object, else use object indices.","code":""},{"path":"https://fleverest.github.io/prefio/reference/choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choices Object — choices","text":"data frame class choices elements: choices list element represents items chosen single rank ordering. alternatives list element represents alternatives (.e. set remaining items choose ) single rank. ordering list element represents ordering choice belongs . list stores number choices names objects attributes nchoices objects respectively.","code":""},{"path":"https://fleverest.github.io/prefio/reference/choices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choices Object — choices","text":"","code":"R <- matrix(c(   1, 2, 0, 0,   4, 1, 2, 3,   2, 1, 1, 1,   1, 2, 3, 0,   2, 1, 1, 0,   1, 0, 3, 2 ), nrow = 6, byrow = TRUE) colnames(R) <- c(\"apple\", \"banana\", \"orange\", \"pear\") R <- preferences(R, format = \"ranking\")  actual_choices <- choices(R, names = TRUE) actual_choices[1:6, ] #> Preference Set: 1  #> --------------  #> {orange, pear} from {apple, banana, orange, pear}  #> {apple} from {apple, banana}  #> {banana} from {banana}  #> ==============  #> Preference Set: 2  #> --------------  #> {banana} from {apple, banana, orange, pear}  #> {orange} from {apple, orange, pear}  #> {pear} from {apple, pear}  #> ==============   coded_choices <- choices(R, names = FALSE) coded_choices[1:2, ] #> Preference Set: 1  #> --------------  #> {3, 4} from {1, 2, 3, 4}  #> {1} from {1, 2}  #> ==============  as.data.frame(coded_choices)[1:2, ] #>   choices alternatives ordering #> 1    3, 4   1, 2, 3, 4        1 #> 2       1         1, 2        1 attr(coded_choices, \"objects\") #> [1] \"apple\"  \"banana\" \"orange\" \"pear\""},{"path":"https://fleverest.github.io/prefio/reference/group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Preferences — group","title":"Group Preferences — group","text":"Create object class grouped_preferences associates group index object class preferences. allows preferences linked covariates group-specific values.","code":""},{"path":"https://fleverest.github.io/prefio/reference/group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Preferences — group","text":"","code":"group(x, ...)  # S3 method for preferences group(x, index, ...)  # S3 method for grouped_preferences [(x, i, j, ...)  # S3 method for grouped_preferences format(x, max = 2L, width = 20L, ...)"},{"path":"https://fleverest.github.io/prefio/reference/group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Preferences — group","text":"x preferences object group(); otherwise grouped_preferences object. ... Additional arguments passed .preferences grouped_preferences; unused format. index numeric vector factor length equal number preferences specifying subject set. Indices specifying groups extract, may data type accepted [. j Indices specifying items extract. object, otherwise return matrix/vector. max maximum number preferences format per subject. width maximum width number characters format preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Preferences — group","text":"object class grouped_preferences, vector group IDs following attributes: preferences preferences object. index index matching preference set group ID.","code":""},{"path":"https://fleverest.github.io/prefio/reference/group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Preferences — group","text":"","code":"# ungrouped preferences (5 preference sets, 4 items) R <- as.preferences(   matrix(c(     1, 2, 0, 0,     0, 2, 1, 0,     0, 0, 1, 2,     2, 1, 0, 0,     0, 1, 2, 3   ), ncol = 4, byrow = TRUE),   format = \"ranking\",   item_names = LETTERS[1:4] ) length(R) #> [1] 5  # group preferences (first three in group 1, next two in group 2) G <- group(R, c(1, 1, 1, 2, 2)) length(G) #> [1] 2  ## by default up to 2 preference sets are shown per group, \"...\" indicates if ## there are further preferences G #>                                     1                                     2  #> [C = D > A > B], [A = D > C > B], ...      [C = D > B > A], [A > B > C > D]  print(G, max = 1) #>                    1                    2  #> [C = D > A > B], ... [C = D > B > A], ...   ## select preferences from group 1 G[1, ] #>                                     1  #> [C = D > A > B], [A = D > C > B], ...   ## exclude item 3 from preferences G[, -3] #>                             1                             2  #> [D > A > B], [A = D > B], ...      [D > B > A], [A > B > D]   ## Project preferences in all groups to their first preference G[, 1, by.rank = TRUE] #>                     1                     2  #> [C = D], [A = D], ...          [C = D], [A]   ## preferences from group 2, excluding item 3 ## - note group 2 becomes the first (and only) group G[2, -3] #>                        1  #> [D > B > A], [A > B > D]   # Group preferences by a factor G <- group(R, factor(c(\"G1\", \"G1\", \"G1\", \"G2\", \"G2\")))  G #>                                    G1                                    G2  #> [C = D > A > B], [A = D > C > B], ...      [C = D > B > A], [A > B > C > D]  print(G, max = 1) #>                   G1                   G2  #> [C = D > A > B], ... [C = D > B > A], ...   ## select preferences from group G1 G[\"G1\"] #>                                    G1  #> [C = D > A > B], [A = D > C > B], ..."},{"path":"https://fleverest.github.io/prefio/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://fleverest.github.io/prefio/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://fleverest.github.io/prefio/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferences Object — preferences","title":"Preferences Object — preferences","text":"Create preferences object representing Ordinal Preference datasets.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferences Object — preferences","text":"","code":"preferences(   data,   format = c(\"long\", \"ordering\", \"ranking\"),   id = NULL,   rank = NULL,   item = NULL,   item_names = NULL,   frequencies = NULL,   aggregate = FALSE,   verbose = TRUE,   ... )  # S3 method for preferences [(x, i, j, ..., by.rank = FALSE, as.ordering = FALSE)  as.preferences(x, ...)  # S3 method for grouped_preferences as.preferences(x, aggregate = FALSE, verbose = TRUE, ...)  # S3 method for default as.preferences(   x,   format = c(\"long\", \"ranking\", \"ordering\"),   id = NULL,   item = NULL,   rank = NULL,   item_names = NULL,   aggregate = FALSE,   verbose = TRUE,   ... )  # S3 method for matrix as.preferences(   x,   format = c(\"long\", \"ranking\"),   id = NULL,   item = NULL,   rank = NULL,   item_names = NULL,   aggregate = FALSE,   verbose = TRUE,   ... )  # S3 method for aggregated_preferences as.preferences(x, ...)  # S3 method for preferences format(x, width = 40L, ...)"},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferences Object — preferences","text":"data data frame matrix one three formats: \"ordering\" Orderings must data frame list-valued columns. row represents ordering items first last, representing ties list vectors corresponding items. \"ranking\" row assigns rank item, columns representing items.  Note rankings converted 'dense' rankings output (see Details). \"long\" Three columns: id column grouping rows correspond single set preferences, item column specifying (either index name) item row refers , rank column specifying rank associated item. format format data: one \"ordering\", \"ranking\", \"long\" (see ). default, data assumed \"long\" format. id data long-format: column representing preference set grouping. rank data long-format: column representing rank associated item. item data long-format: column representing items name index, case item_names parameter also passed, items named integers. item_names names full set items. loading data using integer-valued indices place item names, item_names character vector correct order. frequencies optional integer vector containing number occurences preference. provided, method return aggregated_preferences object corresponding frequencies. aggregate TRUE, aggregate preferences via aggregate.preferences returning. returns aggregated_preferences object. verbose TRUE, diagnostic messages sent stdout. ... Unused. x preferences object subset. index preference-set access. j item names indices project onto, e.g. j = 1 preferences projected onto first item; .rank = TRUE j corresponds rank items subset , e.g. j = 1 preferences truncated contain highest-preference. .rank FALSE, index j corresponds items, true index corresponds rank. .ordering FALSE, returns preferences object: internally rows \\(\\) contain ranking assigned item preference \\(p_i\\). TRUE, returns data frame columns group items rank. width width number characters format preference, truncating \"...\" long.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preferences Object — preferences","text":"default, preferences object, data frame list-valued columns corresponding preferences items. may ordering subsets items case ties, potentially-partial strict ordering. case partial tied preferences, entries may empty lists.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preferences Object — preferences","text":"Ordinal preferences can order every item, can order subset. ordinal preference datasets contain ties items given rank. Hence, four distinct types preferential data: soc Strict Orders - Complete List soi Strict Orders - Incomplete List toc Orders Ties - Complete List toi Orders Ties - Incomplete List data type stored alongside preferences attribute attr(preferences, \"preftype\"). data type determined automatically. every preference ranks every item, data type \"soc\" \"soi\". Similarly, preference contains tie data type \"toc\" \"toi\". set preferences can represented either ranking ordering. correspond two ways can list set preferences vector: ordering items listed order preferred least preferred, allowing multiple items place case ties. ranking rank assigned item.  Conventionally, ranks integers increasing order (larger values indicating lower preference), can ordinal values.  given rankings converted 'dense' rankings: positive integers 1 maximum rank, gaps ranks. reading preferences ordering matrix, index items order passed item_names parameter. reading rankings matrix, item_names provided, order inferred named columns. preferences object can also read long-format matrix, three columns: id, item rank. id variable groups rows matrix correspond single set preferences, item:rank, pairs indicate item ranked. reading matrix format item_names parameter passed, order determined automatically.","code":""},{"path":"https://fleverest.github.io/prefio/reference/preferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preferences Object — preferences","text":"","code":"# create rankings from data in long form  # Example long-form data x <- data.frame(   id = c(rep(1:4, each = 4), 5, 5, 5),   item = c(     LETTERS[c(1:3, 3, 1:4, 2:5, 1:2, 1)], NA,     LETTERS[3:5]   ),   rank = c(4:1, rep(NA, 4), 3:4, NA, NA, 1, 3, 4, 2, 2, 2, 3) )  # * Set #1 has two different ranks for the same item (item C # has rank 1 and 2). This item will be excluded from the preferences. # * All ranks are missing in set #2, a technically valid partial ordering # * Some ranks are missing in set #3, a perfectly valid partial ordering # * Set #4 has inconsistent ranks for two items, and a rank with a # missing item. # * Set #5 is not a dense ranking. It will be converted to be dense and then # inferred to be a regular partial ordering with ties. split(x, x$rank) #> $`1` #>    id item rank #> 4   1    C    1 #> 13  4    A    1 #>  #> $`2` #>    id item rank #> 3   1    C    2 #> 16  4 <NA>    2 #> 17  5    C    2 #> 18  5    D    2 #>  #> $`3` #>    id item rank #> 2   1    B    3 #> 9   3    B    3 #> 14  4    B    3 #> 19  5    E    3 #>  #> $`4` #>    id item rank #> 1   1    A    4 #> 10  3    C    4 #> 15  4    A    4 #>   # Creating a preferences object with this data will attempt to resolve these # issues automatically, sending warnings when assumptions need to be made. preferences(x, id = \"id\", item = \"item\", rank = \"rank\") #> Dropping rows containing `NA`. #> Duplicated rankings per item detected: only the highest ranks will be used. #> [1] [C > B > A] [B > C]     [A > B]     [C = D > E]  # Convert an existing matrix of rankings to a preferences object. rnk <- matrix(c(   1, 2, 0, 0,   4, 1, 2, 3,   2, 1, 1, 1,   1, 2, 3, 0,   2, 1, 1, 0,   1, 0, 3, 2 ), nrow = 6, byrow = TRUE) colnames(rnk) <- c(\"apple\", \"banana\", \"orange\", \"pear\")  rnk <- as.preferences(rnk, format = \"ranking\")  # Convert an existing data frame of orderings to a preferences object. e <- character() # short-hand for empty ranks ord <- preferences(   as.data.frame(     rbind(       list(1, 2, e, e), # apple, banana       list(\"banana\", \"orange\", \"pear\", \"apple\"),       list(c(\"banana\", \"orange\", \"pear\"), \"apple\", e, e),       list(\"apple\", \"banana\", \"orange\", e),       list(c(\"banana\", \"orange\"), \"apple\", e, e),       list(\"apple\", \"pear\", \"orange\", e)     )   ),   format = \"ordering\",   item_names = c(\"apple\", \"banana\", \"orange\", \"pear\") )  # Access the first three sets of preferences ord[1:3, ] #> [1] [apple > banana]                 [banana > orange > pear > apple] #> [3] [banana = orange = pear > apple]  # Truncate preferences to the top 2 ranks ord[, 1:2, by_rank = TRUE] #> [1] [apple > banana] [banana > apple] [banana > apple] [apple > banana] #> [5] [banana > apple] [apple]           # Exclude pear from the rankings ord[, -4] #> [1] [apple > banana]          [banana > orange > apple] #> [3] [banana = orange > apple] [apple > banana > orange] #> [5] [banana = orange > apple] [apple > orange]           # Get the highest-ranked items and return as a data.frame of orderings ord[, 1, by_rank = TRUE, as.ordering = TRUE] #>   Rank1 #> 1 apple #> 2 apple #> 3 apple #> 4 apple #> 5 apple #> 6 apple  # Convert the preferences to a ranking matrix as.matrix(ord) #>      apple banana orange pear #> [1,]     1      2     NA   NA #> [2,]     4      1      2    3 #> [3,]     2      1      1    1 #> [4,]     1      2      3   NA #> [5,]     2      1      1   NA #> [6,]     1     NA      3    2 #> attr(,\"preftype\") #> [1] \"toi\"  # Get the rank of apple in the third preference-set as.matrix(ord)[3, 1] #> apple  #>     2   # Get all the ranks assigned to apple as a vector as.matrix(ord)[, \"apple\"] #> [1] 1 4 2 1 2 1"},{"path":"https://fleverest.github.io/prefio/reference/prefio-package.html","id":null,"dir":"Reference","previous_headings":"","what":"prefio: Structures for Preference Data — prefio-package","title":"prefio: Structures for Preference Data — prefio-package","text":"Convenient structures creating, sourcing, reading, writing manipulating ordinal preference data. Methods writing /PrefLib formats. See Nicholas Mattei Toby Walsh \"PrefLib: Library Preference Data\" (2013) doi:10.1007/978-3-642-41575-3_20 .","code":""},{"path":[]},{"path":"https://fleverest.github.io/prefio/reference/prefio-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"prefio: Structures for Preference Data — prefio-package","text":"Maintainer: Floyd Everest @floydeverest.com (ORCID) Authors: Heather Turner ht@heatherturner.net (ORCID) Damjan Vukcevic damjan@vukcevic.net (ORCID)","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Ordinal Preference Data From PrefLib — read_preflib","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Read orderings .soc, .soi, .toc .toi files storing ordinal preference data format defined {PrefLib}: Library Preferences preferences object.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"","code":"read_preflib(   file,   from_preflib = FALSE,   preflib_url = \"https://www.preflib.org/static/data\" )"},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"file preferential data file, conventionally extension .soc, .soi, .toc .toi according data type. from_preflib logical , TRUE attempt source file PrefLib adding database HTTP prefix. preflib_url URL preprended file, from_preflib TRUE.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"aggregated_preferences object containing PrefLib data.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Note PrefLib refers items ordered \"alternatives\". file types supported .soc Strict Orders - Complete List .soi Strict Orders - Incomplete List .toc Orders Ties - Complete List .toi Orders Ties - Incomplete List numerically coded orderings frequencies read data frame, storing item names attribute. .aggregated_preferences method converts aggregated_preferences object items labelled name. PrefLib file may corrupt, sense ordered alternatives match names. case, file can read data frame (warning), .aggregated_preferences throw error.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Netflix cities datasets used examples Caragiannis et al (2017) Bennet Lanning (2007) respectively. data sets require citation re-use.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"Mattei, N. Walsh, T. (2013) PrefLib: Library Preference Data. Proceedings Third International Conference Algorithmic Decision Theory (ADT 2013). Lecture Notes Artificial Intelligence, Springer. Bennett, J. Lanning, S. (2007) Netflix Prize. Proceedings KDD Cup Workshops.","code":""},{"path":"https://fleverest.github.io/prefio/reference/read_preflib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Ordinal Preference Data From PrefLib — read_preflib","text":"","code":"# Can take a little while depending on speed of internet connection  # \\donttest{ # strict complete orderings of four films on Netflix netflix <- read_preflib(\"netflix/00004-00000138.soc\", from_preflib = TRUE) head(netflix) #>                                preferences frequencies #> 1 [Beverly Hills Cop > Mean Girls > M ...]          68 #> 2 [Mean Girls > Beverly Hills Cop > M ...]          53 #> 3 [Beverly Hills Cop > Mean Girls > T ...]          49 #> 4 [Mean Girls > Beverly Hills Cop > T ...]          44 #> 5 [Beverly Hills Cop > Mission: Impos ...]          39 #> 6 [The Mummy Returns > Beverly Hills  ...]          37 names(netflix$preferences) #> [1] \"Mean Girls\"             \"Beverly Hills Cop\"      \"The Mummy Returns\"      #> [4] \"Mission: Impossible II\"  # strict incomplete orderings of 6 random cities from 36 in total cities <- read_preflib(\"cities/00034-00000001.soi\", from_preflib = TRUE) # }"},{"path":"https://fleverest.github.io/prefio/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. utils str","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"Write preferences .soc, .soi, .toc .toi file types, defined PrefLib specification: {PrefLib}: Library Preferences.","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"","code":"write_preflib(   x,   file = \"\",   title = NULL,   publication_date = NULL,   modification_type = NULL,   modification_date = NULL,   description = NULL,   relates_to = NULL,   related_files = NULL )"},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"x aggregated_preferences object write file. x different class, attempts coerce x aggregated_preferences object via .aggregated_preferences(). file Either character string naming file writeable, open connection. empty string \"\" write stdout. title title data file, instance name election represented data file. provided, check presence attr(x, \"preflib\"), exists check TITLE. publication_date date data file published first time. provided, check presence attr(x, \"preflib\"), exists check PUBLICATION DATE. modification_type modification type data: one original, induced, imbued synthetic (see Details). provided, check presence attr(x, \"preflib\"), exists check MODIFICATION TYPE. modification_date last time data modified. provided, check presence attr(x, \"preflib\"), exists check MODIFICATION DATE. description description data file, providing additional information . provided, check presence attr(x, \"preflib\"), exists check DESCRIPTION. relates_to name data file current file relates , typically source file case current file derived another one. provided, check presence attr(x, \"preflib\"), exists check RELATES . related_files list data files related one, comma separated. provided, check presence attr(x, \"preflib\"), exists check RELATED FILES.","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"return value. Output written file stdout.","code":""},{"path":"https://fleverest.github.io/prefio/reference/write_preflib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write Ordinal Preference Data to PrefLib Formats — write_preflib","text":"file types supported .soc Strict Orders - Complete List .soi Strict Orders - Incomplete List .toc Orders Ties - Complete List .toi Orders Ties - Incomplete List PrefLib format specification requires additional metadata. Note additional metadata required PrefLib specification necessarily required write_preflib method; missing fields required PrefLib format simply show \"NA\". TITLE (required) title data file, instance year election represented data file. DESCRIPTION (optional) description data file, providing additional information . RELATES (optional) name data file current file relates , typically source file case current file derived another one. RELATED FILES (optional) list data files related one, comma separated. PUBLICATION DATE (required) date data file published first time. MODIFICATION TYPE (required) modification type data. One : original Data converted PrefLib format. induced Data induced another context. example, computing pairwise relation set strict total orders. assumptions made create files, just change expression language. imbued Data imbued extra information. example, extending incomplete partial order placing unranked candidates tied end. synthetic Data generated artificially. MODIFICATION DATE (optional) last time data modified. addition fields, required PrefLib fields generated automatically depending arguments write_preflib() attributes aggregated_preferences object written file: FILE NAME name output file. DATA TYPE data type (one soc, soi, toc toi). NUMBER ALTERNATIVES number items. ALTERNATIVE NAME X name item, X ranges 0 length(items). NUMBER VOTERS total number orderings. NUMBER UNIQUE ORDERS number distinct orderings. Note PrefLib refers items \"alternatives\". \"alternatives\" output file \"items\" aggregated_preferences object.","code":""},{"path":"https://fleverest.github.io/prefio/news/index.html","id":"prefio-011","dir":"Changelog","previous_headings":"","what":"prefio 0.1.1","title":"prefio 0.1.1","text":"Changed string formatting preferences (now displays [> B > C] rather \"> B > C\"). Fixed bug loading preferences orderings format. Allows empty preferences object (displays preferences(0)). Allow blank preferences (displays [blank]).","code":""},{"path":"https://fleverest.github.io/prefio/news/index.html","id":"prefio-010","dir":"Changelog","previous_headings":"","what":"prefio 0.1.0","title":"prefio 0.1.0","text":"CRAN release: 2023-03-08 initial release prefio.","code":""}]
